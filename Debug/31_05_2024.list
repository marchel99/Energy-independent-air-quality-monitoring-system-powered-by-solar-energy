
31_05_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002330  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080024b8  080024b8  000034b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024f8  080024f8  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080024f8  080024f8  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024f8  080024f8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024f8  080024f8  000034f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024fc  080024fc  000034fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002500  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  0800250c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  0800250c  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000907c  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e0  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0000e998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000071c  00000000  00000000  0000f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cb1  00000000  00000000  0000fa14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b978  00000000  00000000  000356c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7529  00000000  00000000  0004103d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128566  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002548  00000000  00000000  001285ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0012aaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024a0 	.word	0x080024a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080024a0 	.word	0x080024a0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9c7 	bl	800055e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80f 	bl	80001f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f892 	bl	80002fc <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f852 	bl	8000280 <MX_I2C1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80001dc:	2120      	movs	r1, #32
 80001de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001e2:	f000 fcfd 	bl	8000be0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80001e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001ea:	f000 fa2d 	bl	8000648 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80001ee:	bf00      	nop
 80001f0:	e7f4      	b.n	80001dc <main+0x14>

080001f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f2:	b580      	push	{r7, lr}
 80001f4:	b096      	sub	sp, #88	@ 0x58
 80001f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2244      	movs	r2, #68	@ 0x44
 80001fe:	2100      	movs	r1, #0
 8000200:	4618      	mov	r0, r3
 8000202:	f002 f921 	bl	8002448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000206:	463b      	mov	r3, r7
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000214:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000218:	f000 fe3c 	bl	8000e94 <HAL_PWREx_ControlVoltageScaling>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000222:	f000 f8a9 	bl	8000378 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000226:	2310      	movs	r3, #16
 8000228:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000232:	2360      	movs	r3, #96	@ 0x60
 8000234:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000236:	2300      	movs	r3, #0
 8000238:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0314 	add.w	r3, r7, #20
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fe7e 	bl	8000f40 <HAL_RCC_OscConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800024a:	f000 f895 	bl	8000378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024e:	230f      	movs	r3, #15
 8000250:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000252:	2300      	movs	r3, #0
 8000254:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000262:	463b      	mov	r3, r7
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fa46 	bl	80016f8 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000272:	f000 f881 	bl	8000378 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3758      	adds	r7, #88	@ 0x58
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000284:	4b1b      	ldr	r3, [pc, #108]	@ (80002f4 <MX_I2C1_Init+0x74>)
 8000286:	4a1c      	ldr	r2, [pc, #112]	@ (80002f8 <MX_I2C1_Init+0x78>)
 8000288:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800028a:	4b1a      	ldr	r3, [pc, #104]	@ (80002f4 <MX_I2C1_Init+0x74>)
 800028c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000290:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000292:	4b18      	ldr	r3, [pc, #96]	@ (80002f4 <MX_I2C1_Init+0x74>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000298:	4b16      	ldr	r3, [pc, #88]	@ (80002f4 <MX_I2C1_Init+0x74>)
 800029a:	2201      	movs	r2, #1
 800029c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800029e:	4b15      	ldr	r3, [pc, #84]	@ (80002f4 <MX_I2C1_Init+0x74>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002a4:	4b13      	ldr	r3, [pc, #76]	@ (80002f4 <MX_I2C1_Init+0x74>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002aa:	4b12      	ldr	r3, [pc, #72]	@ (80002f4 <MX_I2C1_Init+0x74>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b0:	4b10      	ldr	r3, [pc, #64]	@ (80002f4 <MX_I2C1_Init+0x74>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002b6:	4b0f      	ldr	r3, [pc, #60]	@ (80002f4 <MX_I2C1_Init+0x74>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002bc:	480d      	ldr	r0, [pc, #52]	@ (80002f4 <MX_I2C1_Init+0x74>)
 80002be:	f000 fca9 	bl	8000c14 <HAL_I2C_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002c8:	f000 f856 	bl	8000378 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002cc:	2100      	movs	r1, #0
 80002ce:	4809      	ldr	r0, [pc, #36]	@ (80002f4 <MX_I2C1_Init+0x74>)
 80002d0:	f000 fd3b 	bl	8000d4a <HAL_I2CEx_ConfigAnalogFilter>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80002da:	f000 f84d 	bl	8000378 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002de:	2100      	movs	r1, #0
 80002e0:	4804      	ldr	r0, [pc, #16]	@ (80002f4 <MX_I2C1_Init+0x74>)
 80002e2:	f000 fd7d 	bl	8000de0 <HAL_I2CEx_ConfigDigitalFilter>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80002ec:	f000 f844 	bl	8000378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000028 	.word	0x20000028
 80002f8:	40005400 	.word	0x40005400

080002fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b088      	sub	sp, #32
 8000300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000302:	f107 030c 	add.w	r3, r7, #12
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000312:	4b18      	ldr	r3, [pc, #96]	@ (8000374 <MX_GPIO_Init+0x78>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000316:	4a17      	ldr	r2, [pc, #92]	@ (8000374 <MX_GPIO_Init+0x78>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800031e:	4b15      	ldr	r3, [pc, #84]	@ (8000374 <MX_GPIO_Init+0x78>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	60bb      	str	r3, [r7, #8]
 8000328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032a:	4b12      	ldr	r3, [pc, #72]	@ (8000374 <MX_GPIO_Init+0x78>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800032e:	4a11      	ldr	r2, [pc, #68]	@ (8000374 <MX_GPIO_Init+0x78>)
 8000330:	f043 0302 	orr.w	r3, r3, #2
 8000334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000336:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <MX_GPIO_Init+0x78>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800033a:	f003 0302 	and.w	r3, r3, #2
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	2120      	movs	r1, #32
 8000346:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800034a:	f000 fc31 	bl	8000bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800034e:	2320      	movs	r3, #32
 8000350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800035e:	f107 030c 	add.w	r3, r7, #12
 8000362:	4619      	mov	r1, r3
 8000364:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000368:	f000 fa78 	bl	800085c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800036c:	bf00      	nop
 800036e:	3720      	adds	r7, #32
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40021000 	.word	0x40021000

08000378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800037c:	b672      	cpsid	i
}
 800037e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000380:	bf00      	nop
 8000382:	e7fd      	b.n	8000380 <Error_Handler+0x8>

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <HAL_MspInit+0x44>)
 800038c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800038e:	4a0e      	ldr	r2, [pc, #56]	@ (80003c8 <HAL_MspInit+0x44>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6613      	str	r3, [r2, #96]	@ 0x60
 8000396:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <HAL_MspInit+0x44>)
 8000398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <HAL_MspInit+0x44>)
 80003a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003a6:	4a08      	ldr	r2, [pc, #32]	@ (80003c8 <HAL_MspInit+0x44>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80003ae:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <HAL_MspInit+0x44>)
 80003b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000

080003cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b0ac      	sub	sp, #176	@ 0xb0
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	2288      	movs	r2, #136	@ 0x88
 80003ea:	2100      	movs	r1, #0
 80003ec:	4618      	mov	r0, r3
 80003ee:	f002 f82b 	bl	8002448 <memset>
  if(hi2c->Instance==I2C1)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a21      	ldr	r2, [pc, #132]	@ (800047c <HAL_I2C_MspInit+0xb0>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d13b      	bne.n	8000474 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003fc:	2340      	movs	r3, #64	@ 0x40
 80003fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000400:	2300      	movs	r3, #0
 8000402:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	4618      	mov	r0, r3
 800040a:	f001 fb61 	bl	8001ad0 <HAL_RCCEx_PeriphCLKConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000414:	f7ff ffb0 	bl	8000378 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b19      	ldr	r3, [pc, #100]	@ (8000480 <HAL_I2C_MspInit+0xb4>)
 800041a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041c:	4a18      	ldr	r2, [pc, #96]	@ (8000480 <HAL_I2C_MspInit+0xb4>)
 800041e:	f043 0302 	orr.w	r3, r3, #2
 8000422:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000424:	4b16      	ldr	r3, [pc, #88]	@ (8000480 <HAL_I2C_MspInit+0xb4>)
 8000426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000428:	f003 0302 	and.w	r3, r3, #2
 800042c:	613b      	str	r3, [r7, #16]
 800042e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000430:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000434:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000438:	2312      	movs	r3, #18
 800043a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000444:	2303      	movs	r3, #3
 8000446:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800044a:	2304      	movs	r3, #4
 800044c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000450:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000454:	4619      	mov	r1, r3
 8000456:	480b      	ldr	r0, [pc, #44]	@ (8000484 <HAL_I2C_MspInit+0xb8>)
 8000458:	f000 fa00 	bl	800085c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800045c:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <HAL_I2C_MspInit+0xb4>)
 800045e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000460:	4a07      	ldr	r2, [pc, #28]	@ (8000480 <HAL_I2C_MspInit+0xb4>)
 8000462:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000466:	6593      	str	r3, [r2, #88]	@ 0x58
 8000468:	4b05      	ldr	r3, [pc, #20]	@ (8000480 <HAL_I2C_MspInit+0xb4>)
 800046a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800046c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000474:	bf00      	nop
 8000476:	37b0      	adds	r7, #176	@ 0xb0
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40005400 	.word	0x40005400
 8000480:	40021000 	.word	0x40021000
 8000484:	48000400 	.word	0x48000400

08000488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <NMI_Handler+0x4>

08000490 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <HardFault_Handler+0x4>

08000498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <MemManage_Handler+0x4>

080004a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <BusFault_Handler+0x4>

080004a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <UsageFault_Handler+0x4>

080004b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004de:	f000 f893 	bl	8000608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <SystemInit+0x20>)
 80004ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004f2:	4a05      	ldr	r2, [pc, #20]	@ (8000508 <SystemInit+0x20>)
 80004f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	e000ed00 	.word	0xe000ed00

0800050c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800050c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000544 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000510:	f7ff ffea 	bl	80004e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480c      	ldr	r0, [pc, #48]	@ (8000548 <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490d      	ldr	r1, [pc, #52]	@ (800054c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0d      	ldr	r2, [pc, #52]	@ (8000550 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0a      	ldr	r2, [pc, #40]	@ (8000554 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0a      	ldr	r4, [pc, #40]	@ (8000558 <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800053a:	f001 ff8d 	bl	8002458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800053e:	f7ff fe43 	bl	80001c8 <main>

08000542 <LoopForever>:

LoopForever:
    b LoopForever
 8000542:	e7fe      	b.n	8000542 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000544:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800054c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000550:	08002500 	.word	0x08002500
  ldr r2, =_sbss
 8000554:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000558:	20000080 	.word	0x20000080

0800055c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800055c:	e7fe      	b.n	800055c <ADC1_2_IRQHandler>

0800055e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b082      	sub	sp, #8
 8000562:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000564:	2300      	movs	r3, #0
 8000566:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000568:	2003      	movs	r0, #3
 800056a:	f000 f943 	bl	80007f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800056e:	200f      	movs	r0, #15
 8000570:	f000 f80e 	bl	8000590 <HAL_InitTick>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d002      	beq.n	8000580 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800057a:	2301      	movs	r3, #1
 800057c:	71fb      	strb	r3, [r7, #7]
 800057e:	e001      	b.n	8000584 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000580:	f7ff ff00 	bl	8000384 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000584:	79fb      	ldrb	r3, [r7, #7]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000598:	2300      	movs	r3, #0
 800059a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <HAL_InitTick+0x6c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d023      	beq.n	80005ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005a4:	4b16      	ldr	r3, [pc, #88]	@ (8000600 <HAL_InitTick+0x70>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <HAL_InitTick+0x6c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4619      	mov	r1, r3
 80005ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f941 	bl	8000842 <HAL_SYSTICK_Config>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d10f      	bne.n	80005e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b0f      	cmp	r3, #15
 80005ca:	d809      	bhi.n	80005e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005cc:	2200      	movs	r2, #0
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	f04f 30ff 	mov.w	r0, #4294967295
 80005d4:	f000 f919 	bl	800080a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000604 <HAL_InitTick+0x74>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	e007      	b.n	80005f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005e0:	2301      	movs	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	e004      	b.n	80005f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	e001      	b.n	80005f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005ec:	2301      	movs	r3, #1
 80005ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000000 	.word	0x20000000
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <HAL_IncTick+0x20>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <HAL_IncTick+0x24>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4413      	add	r3, r2
 8000618:	4a04      	ldr	r2, [pc, #16]	@ (800062c <HAL_IncTick+0x24>)
 800061a:	6013      	str	r3, [r2, #0]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20000008 	.word	0x20000008
 800062c:	2000007c 	.word	0x2000007c

08000630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return uwTick;
 8000634:	4b03      	ldr	r3, [pc, #12]	@ (8000644 <HAL_GetTick+0x14>)
 8000636:	681b      	ldr	r3, [r3, #0]
}
 8000638:	4618      	mov	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	2000007c 	.word	0x2000007c

08000648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000650:	f7ff ffee 	bl	8000630 <HAL_GetTick>
 8000654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000660:	d005      	beq.n	800066e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <HAL_Delay+0x44>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	461a      	mov	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800066e:	bf00      	nop
 8000670:	f7ff ffde 	bl	8000630 <HAL_GetTick>
 8000674:	4602      	mov	r2, r0
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	429a      	cmp	r2, r3
 800067e:	d8f7      	bhi.n	8000670 <HAL_Delay+0x28>
  {
  }
}
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000008 	.word	0x20000008

08000690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <__NVIC_SetPriorityGrouping+0x44>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a6:	68ba      	ldr	r2, [r7, #8]
 80006a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006ac:	4013      	ands	r3, r2
 80006ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006c2:	4a04      	ldr	r2, [pc, #16]	@ (80006d4 <__NVIC_SetPriorityGrouping+0x44>)
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	60d3      	str	r3, [r2, #12]
}
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006dc:	4b04      	ldr	r3, [pc, #16]	@ (80006f0 <__NVIC_GetPriorityGrouping+0x18>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	f003 0307 	and.w	r3, r3, #7
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000704:	2b00      	cmp	r3, #0
 8000706:	db0a      	blt.n	800071e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	b2da      	uxtb	r2, r3
 800070c:	490c      	ldr	r1, [pc, #48]	@ (8000740 <__NVIC_SetPriority+0x4c>)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	0112      	lsls	r2, r2, #4
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	440b      	add	r3, r1
 8000718:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800071c:	e00a      	b.n	8000734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4908      	ldr	r1, [pc, #32]	@ (8000744 <__NVIC_SetPriority+0x50>)
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	f003 030f 	and.w	r3, r3, #15
 800072a:	3b04      	subs	r3, #4
 800072c:	0112      	lsls	r2, r2, #4
 800072e:	b2d2      	uxtb	r2, r2
 8000730:	440b      	add	r3, r1
 8000732:	761a      	strb	r2, [r3, #24]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000e100 	.word	0xe000e100
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000748:	b480      	push	{r7}
 800074a:	b089      	sub	sp, #36	@ 0x24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	f1c3 0307 	rsb	r3, r3, #7
 8000762:	2b04      	cmp	r3, #4
 8000764:	bf28      	it	cs
 8000766:	2304      	movcs	r3, #4
 8000768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	3304      	adds	r3, #4
 800076e:	2b06      	cmp	r3, #6
 8000770:	d902      	bls.n	8000778 <NVIC_EncodePriority+0x30>
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3b03      	subs	r3, #3
 8000776:	e000      	b.n	800077a <NVIC_EncodePriority+0x32>
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	f04f 32ff 	mov.w	r2, #4294967295
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	43da      	mvns	r2, r3
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	401a      	ands	r2, r3
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000790:	f04f 31ff 	mov.w	r1, #4294967295
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
 800079a:	43d9      	mvns	r1, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a0:	4313      	orrs	r3, r2
         );
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3724      	adds	r7, #36	@ 0x24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
	...

080007b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007c0:	d301      	bcc.n	80007c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007c2:	2301      	movs	r3, #1
 80007c4:	e00f      	b.n	80007e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c6:	4a0a      	ldr	r2, [pc, #40]	@ (80007f0 <SysTick_Config+0x40>)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ce:	210f      	movs	r1, #15
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295
 80007d4:	f7ff ff8e 	bl	80006f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <SysTick_Config+0x40>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007de:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <SysTick_Config+0x40>)
 80007e0:	2207      	movs	r2, #7
 80007e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	e000e010 	.word	0xe000e010

080007f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ff47 	bl	8000690 <__NVIC_SetPriorityGrouping>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b086      	sub	sp, #24
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	60b9      	str	r1, [r7, #8]
 8000814:	607a      	str	r2, [r7, #4]
 8000816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800081c:	f7ff ff5c 	bl	80006d8 <__NVIC_GetPriorityGrouping>
 8000820:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	68b9      	ldr	r1, [r7, #8]
 8000826:	6978      	ldr	r0, [r7, #20]
 8000828:	f7ff ff8e 	bl	8000748 <NVIC_EncodePriority>
 800082c:	4602      	mov	r2, r0
 800082e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff5d 	bl	80006f4 <__NVIC_SetPriority>
}
 800083a:	bf00      	nop
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b082      	sub	sp, #8
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ffb0 	bl	80007b0 <SysTick_Config>
 8000850:	4603      	mov	r3, r0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086a:	e17f      	b.n	8000b6c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	2101      	movs	r1, #1
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	fa01 f303 	lsl.w	r3, r1, r3
 8000878:	4013      	ands	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2b00      	cmp	r3, #0
 8000880:	f000 8171 	beq.w	8000b66 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f003 0303 	and.w	r3, r3, #3
 800088c:	2b01      	cmp	r3, #1
 800088e:	d005      	beq.n	800089c <HAL_GPIO_Init+0x40>
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0303 	and.w	r3, r3, #3
 8000898:	2b02      	cmp	r3, #2
 800089a:	d130      	bne.n	80008fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	2203      	movs	r2, #3
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4013      	ands	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	68da      	ldr	r2, [r3, #12]
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008d2:	2201      	movs	r2, #1
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4013      	ands	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	091b      	lsrs	r3, r3, #4
 80008e8:	f003 0201 	and.w	r2, r3, #1
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f003 0303 	and.w	r3, r3, #3
 8000906:	2b03      	cmp	r3, #3
 8000908:	d118      	bne.n	800093c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800090e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000910:	2201      	movs	r2, #1
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	43db      	mvns	r3, r3
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4013      	ands	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	08db      	lsrs	r3, r3, #3
 8000926:	f003 0201 	and.w	r2, r3, #1
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	4313      	orrs	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f003 0303 	and.w	r3, r3, #3
 8000944:	2b03      	cmp	r3, #3
 8000946:	d017      	beq.n	8000978 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	2203      	movs	r2, #3
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4313      	orrs	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f003 0303 	and.w	r3, r3, #3
 8000980:	2b02      	cmp	r3, #2
 8000982:	d123      	bne.n	80009cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	08da      	lsrs	r2, r3, #3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3208      	adds	r2, #8
 800098c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000990:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	f003 0307 	and.w	r3, r3, #7
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	220f      	movs	r2, #15
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4013      	ands	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	691a      	ldr	r2, [r3, #16]
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	08da      	lsrs	r2, r3, #3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3208      	adds	r2, #8
 80009c6:	6939      	ldr	r1, [r7, #16]
 80009c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	2203      	movs	r2, #3
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f003 0203 	and.w	r2, r3, #3
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f000 80ac 	beq.w	8000b66 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	4b5f      	ldr	r3, [pc, #380]	@ (8000b8c <HAL_GPIO_Init+0x330>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a12:	4a5e      	ldr	r2, [pc, #376]	@ (8000b8c <HAL_GPIO_Init+0x330>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a1a:	4b5c      	ldr	r3, [pc, #368]	@ (8000b8c <HAL_GPIO_Init+0x330>)
 8000a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a26:	4a5a      	ldr	r2, [pc, #360]	@ (8000b90 <HAL_GPIO_Init+0x334>)
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	f003 0303 	and.w	r3, r3, #3
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a50:	d025      	beq.n	8000a9e <HAL_GPIO_Init+0x242>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a4f      	ldr	r2, [pc, #316]	@ (8000b94 <HAL_GPIO_Init+0x338>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d01f      	beq.n	8000a9a <HAL_GPIO_Init+0x23e>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a4e      	ldr	r2, [pc, #312]	@ (8000b98 <HAL_GPIO_Init+0x33c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d019      	beq.n	8000a96 <HAL_GPIO_Init+0x23a>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4d      	ldr	r2, [pc, #308]	@ (8000b9c <HAL_GPIO_Init+0x340>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d013      	beq.n	8000a92 <HAL_GPIO_Init+0x236>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4c      	ldr	r2, [pc, #304]	@ (8000ba0 <HAL_GPIO_Init+0x344>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d00d      	beq.n	8000a8e <HAL_GPIO_Init+0x232>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a4b      	ldr	r2, [pc, #300]	@ (8000ba4 <HAL_GPIO_Init+0x348>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d007      	beq.n	8000a8a <HAL_GPIO_Init+0x22e>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a4a      	ldr	r2, [pc, #296]	@ (8000ba8 <HAL_GPIO_Init+0x34c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d101      	bne.n	8000a86 <HAL_GPIO_Init+0x22a>
 8000a82:	2306      	movs	r3, #6
 8000a84:	e00c      	b.n	8000aa0 <HAL_GPIO_Init+0x244>
 8000a86:	2307      	movs	r3, #7
 8000a88:	e00a      	b.n	8000aa0 <HAL_GPIO_Init+0x244>
 8000a8a:	2305      	movs	r3, #5
 8000a8c:	e008      	b.n	8000aa0 <HAL_GPIO_Init+0x244>
 8000a8e:	2304      	movs	r3, #4
 8000a90:	e006      	b.n	8000aa0 <HAL_GPIO_Init+0x244>
 8000a92:	2303      	movs	r3, #3
 8000a94:	e004      	b.n	8000aa0 <HAL_GPIO_Init+0x244>
 8000a96:	2302      	movs	r3, #2
 8000a98:	e002      	b.n	8000aa0 <HAL_GPIO_Init+0x244>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e000      	b.n	8000aa0 <HAL_GPIO_Init+0x244>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	f002 0203 	and.w	r2, r2, #3
 8000aa6:	0092      	lsls	r2, r2, #2
 8000aa8:	4093      	lsls	r3, r2
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ab0:	4937      	ldr	r1, [pc, #220]	@ (8000b90 <HAL_GPIO_Init+0x334>)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	089b      	lsrs	r3, r3, #2
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000abe:	4b3b      	ldr	r3, [pc, #236]	@ (8000bac <HAL_GPIO_Init+0x350>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ae2:	4a32      	ldr	r2, [pc, #200]	@ (8000bac <HAL_GPIO_Init+0x350>)
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ae8:	4b30      	ldr	r3, [pc, #192]	@ (8000bac <HAL_GPIO_Init+0x350>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b0c:	4a27      	ldr	r2, [pc, #156]	@ (8000bac <HAL_GPIO_Init+0x350>)
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b12:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <HAL_GPIO_Init+0x350>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b36:	4a1d      	ldr	r2, [pc, #116]	@ (8000bac <HAL_GPIO_Init+0x350>)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <HAL_GPIO_Init+0x350>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b60:	4a12      	ldr	r2, [pc, #72]	@ (8000bac <HAL_GPIO_Init+0x350>)
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa22 f303 	lsr.w	r3, r2, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f47f ae78 	bne.w	800086c <HAL_GPIO_Init+0x10>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	371c      	adds	r7, #28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010000 	.word	0x40010000
 8000b94:	48000400 	.word	0x48000400
 8000b98:	48000800 	.word	0x48000800
 8000b9c:	48000c00 	.word	0x48000c00
 8000ba0:	48001000 	.word	0x48001000
 8000ba4:	48001400 	.word	0x48001400
 8000ba8:	48001800 	.word	0x48001800
 8000bac:	40010400 	.word	0x40010400

08000bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bc0:	787b      	ldrb	r3, [r7, #1]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bc6:	887a      	ldrh	r2, [r7, #2]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bcc:	e002      	b.n	8000bd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bce:	887a      	ldrh	r2, [r7, #2]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	041a      	lsls	r2, r3, #16
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	43d9      	mvns	r1, r3
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	400b      	ands	r3, r1
 8000c02:	431a      	orrs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	619a      	str	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e08d      	b.n	8000d42 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d106      	bne.n	8000c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff fbc6 	bl	80003cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2224      	movs	r2, #36	@ 0x24
 8000c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0201 	bic.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000c64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000c74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d107      	bne.n	8000c8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	e006      	b.n	8000c9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000c9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d108      	bne.n	8000cb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	e007      	b.n	8000cc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000cc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	6812      	ldr	r2, [r2, #0]
 8000cd0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ce8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	691a      	ldr	r2, [r3, #16]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69d9      	ldr	r1, [r3, #28]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a1a      	ldr	r2, [r3, #32]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	430a      	orrs	r2, r1
 8000d12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f042 0201 	orr.w	r2, r2, #1
 8000d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b20      	cmp	r3, #32
 8000d5e:	d138      	bne.n	8000dd2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d101      	bne.n	8000d6e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	e032      	b.n	8000dd4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2224      	movs	r2, #36	@ 0x24
 8000d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 0201 	bic.w	r2, r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000d9c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6819      	ldr	r1, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f042 0201 	orr.w	r2, r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000dd2:	2302      	movs	r3, #2
  }
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b20      	cmp	r3, #32
 8000df4:	d139      	bne.n	8000e6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d101      	bne.n	8000e04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000e00:	2302      	movs	r3, #2
 8000e02:	e033      	b.n	8000e6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2201      	movs	r2, #1
 8000e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2224      	movs	r2, #36	@ 0x24
 8000e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0201 	bic.w	r2, r2, #1
 8000e22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000e32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f042 0201 	orr.w	r2, r2, #1
 8000e54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2220      	movs	r2, #32
 8000e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000e6a:	2302      	movs	r3, #2
  }
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e7c:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40007000 	.word	0x40007000

08000e94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ea2:	d130      	bne.n	8000f06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ea4:	4b23      	ldr	r3, [pc, #140]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000eb0:	d038      	beq.n	8000f24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb2:	4b20      	ldr	r3, [pc, #128]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000eba:	4a1e      	ldr	r2, [pc, #120]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ebc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ec0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2232      	movs	r2, #50	@ 0x32
 8000ec8:	fb02 f303 	mul.w	r3, r2, r3
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ece:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed2:	0c9b      	lsrs	r3, r3, #18
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ed8:	e002      	b.n	8000ee0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ee0:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eec:	d102      	bne.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1f2      	bne.n	8000eda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000efc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f00:	d110      	bne.n	8000f24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e00f      	b.n	8000f26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f06:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f12:	d007      	beq.n	8000f24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f14:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f1c:	4a05      	ldr	r2, [pc, #20]	@ (8000f34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40007000 	.word	0x40007000
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	431bde83 	.word	0x431bde83

08000f40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e3ca      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f52:	4b97      	ldr	r3, [pc, #604]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f5c:	4b94      	ldr	r3, [pc, #592]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 80e4 	beq.w	800113c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d007      	beq.n	8000f8a <HAL_RCC_OscConfig+0x4a>
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2b0c      	cmp	r3, #12
 8000f7e:	f040 808b 	bne.w	8001098 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	f040 8087 	bne.w	8001098 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f8a:	4b89      	ldr	r3, [pc, #548]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x62>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e3a2      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a1a      	ldr	r2, [r3, #32]
 8000fa6:	4b82      	ldr	r3, [pc, #520]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d004      	beq.n	8000fbc <HAL_RCC_OscConfig+0x7c>
 8000fb2:	4b7f      	ldr	r3, [pc, #508]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000fba:	e005      	b.n	8000fc8 <HAL_RCC_OscConfig+0x88>
 8000fbc:	4b7c      	ldr	r3, [pc, #496]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fc2:	091b      	lsrs	r3, r3, #4
 8000fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d223      	bcs.n	8001014 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fd1d 	bl	8001a10 <RCC_SetFlashLatencyFromMSIRange>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e383      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe0:	4b73      	ldr	r3, [pc, #460]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a72      	ldr	r2, [pc, #456]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b70      	ldr	r3, [pc, #448]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	496d      	ldr	r1, [pc, #436]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ffe:	4b6c      	ldr	r3, [pc, #432]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	4968      	ldr	r1, [pc, #416]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 800100e:	4313      	orrs	r3, r2
 8001010:	604b      	str	r3, [r1, #4]
 8001012:	e025      	b.n	8001060 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001014:	4b66      	ldr	r3, [pc, #408]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a65      	ldr	r2, [pc, #404]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b63      	ldr	r3, [pc, #396]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	4960      	ldr	r1, [pc, #384]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 800102e:	4313      	orrs	r3, r2
 8001030:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001032:	4b5f      	ldr	r3, [pc, #380]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	495b      	ldr	r1, [pc, #364]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001042:	4313      	orrs	r3, r2
 8001044:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d109      	bne.n	8001060 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4618      	mov	r0, r3
 8001052:	f000 fcdd 	bl	8001a10 <RCC_SetFlashLatencyFromMSIRange>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e343      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001060:	f000 fc4a 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 8001064:	4602      	mov	r2, r0
 8001066:	4b52      	ldr	r3, [pc, #328]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	f003 030f 	and.w	r3, r3, #15
 8001070:	4950      	ldr	r1, [pc, #320]	@ (80011b4 <HAL_RCC_OscConfig+0x274>)
 8001072:	5ccb      	ldrb	r3, [r1, r3]
 8001074:	f003 031f 	and.w	r3, r3, #31
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
 800107c:	4a4e      	ldr	r2, [pc, #312]	@ (80011b8 <HAL_RCC_OscConfig+0x278>)
 800107e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001080:	4b4e      	ldr	r3, [pc, #312]	@ (80011bc <HAL_RCC_OscConfig+0x27c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa83 	bl	8000590 <HAL_InitTick>
 800108a:	4603      	mov	r3, r0
 800108c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d052      	beq.n	800113a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	e327      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d032      	beq.n	8001106 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010a0:	4b43      	ldr	r3, [pc, #268]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a42      	ldr	r2, [pc, #264]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010ac:	f7ff fac0 	bl	8000630 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010b4:	f7ff fabc 	bl	8000630 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e310      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010c6:	4b3a      	ldr	r3, [pc, #232]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f0      	beq.n	80010b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010d2:	4b37      	ldr	r3, [pc, #220]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a36      	ldr	r2, [pc, #216]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	4b34      	ldr	r3, [pc, #208]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	4931      	ldr	r1, [pc, #196]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f0:	4b2f      	ldr	r3, [pc, #188]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	492c      	ldr	r1, [pc, #176]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
 8001104:	e01a      	b.n	800113c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001106:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a29      	ldr	r2, [pc, #164]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 800110c:	f023 0301 	bic.w	r3, r3, #1
 8001110:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001112:	f7ff fa8d 	bl	8000630 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800111a:	f7ff fa89 	bl	8000630 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e2dd      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800112c:	4b20      	ldr	r3, [pc, #128]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f0      	bne.n	800111a <HAL_RCC_OscConfig+0x1da>
 8001138:	e000      	b.n	800113c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800113a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	d074      	beq.n	8001232 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2b08      	cmp	r3, #8
 800114c:	d005      	beq.n	800115a <HAL_RCC_OscConfig+0x21a>
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2b0c      	cmp	r3, #12
 8001152:	d10e      	bne.n	8001172 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	2b03      	cmp	r3, #3
 8001158:	d10b      	bne.n	8001172 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115a:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d064      	beq.n	8001230 <HAL_RCC_OscConfig+0x2f0>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d160      	bne.n	8001230 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e2ba      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800117a:	d106      	bne.n	800118a <HAL_RCC_OscConfig+0x24a>
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	e026      	b.n	80011d8 <HAL_RCC_OscConfig+0x298>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001192:	d115      	bne.n	80011c0 <HAL_RCC_OscConfig+0x280>
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 800119a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a02      	ldr	r2, [pc, #8]	@ (80011b0 <HAL_RCC_OscConfig+0x270>)
 80011a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	e014      	b.n	80011d8 <HAL_RCC_OscConfig+0x298>
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000
 80011b4:	080024b8 	.word	0x080024b8
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000004 	.word	0x20000004
 80011c0:	4ba0      	ldr	r3, [pc, #640]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a9f      	ldr	r2, [pc, #636]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 80011c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b9d      	ldr	r3, [pc, #628]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a9c      	ldr	r2, [pc, #624]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 80011d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d013      	beq.n	8001208 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e0:	f7ff fa26 	bl	8000630 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fa22 	bl	8000630 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	@ 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e276      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011fa:	4b92      	ldr	r3, [pc, #584]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f0      	beq.n	80011e8 <HAL_RCC_OscConfig+0x2a8>
 8001206:	e014      	b.n	8001232 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001208:	f7ff fa12 	bl	8000630 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fa0e 	bl	8000630 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	@ 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e262      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001222:	4b88      	ldr	r3, [pc, #544]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f0      	bne.n	8001210 <HAL_RCC_OscConfig+0x2d0>
 800122e:	e000      	b.n	8001232 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d060      	beq.n	8001300 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	2b04      	cmp	r3, #4
 8001242:	d005      	beq.n	8001250 <HAL_RCC_OscConfig+0x310>
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2b0c      	cmp	r3, #12
 8001248:	d119      	bne.n	800127e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d116      	bne.n	800127e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001250:	4b7c      	ldr	r3, [pc, #496]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_RCC_OscConfig+0x328>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e23f      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001268:	4b76      	ldr	r3, [pc, #472]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	061b      	lsls	r3, r3, #24
 8001276:	4973      	ldr	r1, [pc, #460]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800127c:	e040      	b.n	8001300 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d023      	beq.n	80012ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001286:	4b6f      	ldr	r3, [pc, #444]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a6e      	ldr	r2, [pc, #440]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 800128c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001292:	f7ff f9cd 	bl	8000630 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800129a:	f7ff f9c9 	bl	8000630 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e21d      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ac:	4b65      	ldr	r3, [pc, #404]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f0      	beq.n	800129a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b8:	4b62      	ldr	r3, [pc, #392]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	061b      	lsls	r3, r3, #24
 80012c6:	495f      	ldr	r1, [pc, #380]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
 80012cc:	e018      	b.n	8001300 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 80012d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012da:	f7ff f9a9 	bl	8000630 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e2:	f7ff f9a5 	bl	8000630 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e1f9      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012f4:	4b53      	ldr	r3, [pc, #332]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f0      	bne.n	80012e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d03c      	beq.n	8001386 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d01c      	beq.n	800134e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001314:	4b4b      	ldr	r3, [pc, #300]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 8001316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800131a:	4a4a      	ldr	r2, [pc, #296]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001324:	f7ff f984 	bl	8000630 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800132c:	f7ff f980 	bl	8000630 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1d4      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800133e:	4b41      	ldr	r3, [pc, #260]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 8001340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0ef      	beq.n	800132c <HAL_RCC_OscConfig+0x3ec>
 800134c:	e01b      	b.n	8001386 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800134e:	4b3d      	ldr	r3, [pc, #244]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 8001350:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001354:	4a3b      	ldr	r2, [pc, #236]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 8001356:	f023 0301 	bic.w	r3, r3, #1
 800135a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135e:	f7ff f967 	bl	8000630 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001366:	f7ff f963 	bl	8000630 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e1b7      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001378:	4b32      	ldr	r3, [pc, #200]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 800137a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1ef      	bne.n	8001366 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 80a6 	beq.w	80014e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001398:	4b2a      	ldr	r3, [pc, #168]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10d      	bne.n	80013c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a4:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a8:	4a26      	ldr	r2, [pc, #152]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 80013aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80013b0:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 80013b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013bc:	2301      	movs	r3, #1
 80013be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c0:	4b21      	ldr	r3, [pc, #132]	@ (8001448 <HAL_RCC_OscConfig+0x508>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d118      	bne.n	80013fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001448 <HAL_RCC_OscConfig+0x508>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001448 <HAL_RCC_OscConfig+0x508>)
 80013d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d8:	f7ff f92a 	bl	8000630 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e0:	f7ff f926 	bl	8000630 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e17a      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <HAL_RCC_OscConfig+0x508>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d108      	bne.n	8001418 <HAL_RCC_OscConfig+0x4d8>
 8001406:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 8001408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800140c:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001416:	e029      	b.n	800146c <HAL_RCC_OscConfig+0x52c>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b05      	cmp	r3, #5
 800141e:	d115      	bne.n	800144c <HAL_RCC_OscConfig+0x50c>
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 8001422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001426:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 8001432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001436:	4a03      	ldr	r2, [pc, #12]	@ (8001444 <HAL_RCC_OscConfig+0x504>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001440:	e014      	b.n	800146c <HAL_RCC_OscConfig+0x52c>
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000
 8001448:	40007000 	.word	0x40007000
 800144c:	4b9c      	ldr	r3, [pc, #624]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 800144e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001452:	4a9b      	ldr	r2, [pc, #620]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001454:	f023 0301 	bic.w	r3, r3, #1
 8001458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800145c:	4b98      	ldr	r3, [pc, #608]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 800145e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001462:	4a97      	ldr	r2, [pc, #604]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001464:	f023 0304 	bic.w	r3, r3, #4
 8001468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d016      	beq.n	80014a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001474:	f7ff f8dc 	bl	8000630 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800147a:	e00a      	b.n	8001492 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147c:	f7ff f8d8 	bl	8000630 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e12a      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001492:	4b8b      	ldr	r3, [pc, #556]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0ed      	beq.n	800147c <HAL_RCC_OscConfig+0x53c>
 80014a0:	e015      	b.n	80014ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a2:	f7ff f8c5 	bl	8000630 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff f8c1 	bl	8000630 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e113      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014c0:	4b7f      	ldr	r3, [pc, #508]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 80014c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1ed      	bne.n	80014aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d105      	bne.n	80014e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d4:	4b7a      	ldr	r3, [pc, #488]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 80014d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d8:	4a79      	ldr	r2, [pc, #484]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 80014da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014de:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80fe 	beq.w	80016e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	f040 80d0 	bne.w	8001694 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014f4:	4b72      	ldr	r3, [pc, #456]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 0203 	and.w	r2, r3, #3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001504:	429a      	cmp	r2, r3
 8001506:	d130      	bne.n	800156a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	3b01      	subs	r3, #1
 8001514:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001516:	429a      	cmp	r2, r3
 8001518:	d127      	bne.n	800156a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001524:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001526:	429a      	cmp	r2, r3
 8001528:	d11f      	bne.n	800156a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001534:	2a07      	cmp	r2, #7
 8001536:	bf14      	ite	ne
 8001538:	2201      	movne	r2, #1
 800153a:	2200      	moveq	r2, #0
 800153c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800153e:	4293      	cmp	r3, r2
 8001540:	d113      	bne.n	800156a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800154c:	085b      	lsrs	r3, r3, #1
 800154e:	3b01      	subs	r3, #1
 8001550:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001552:	429a      	cmp	r2, r3
 8001554:	d109      	bne.n	800156a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	3b01      	subs	r3, #1
 8001564:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d06e      	beq.n	8001648 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	2b0c      	cmp	r3, #12
 800156e:	d069      	beq.n	8001644 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001570:	4b53      	ldr	r3, [pc, #332]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d105      	bne.n	8001588 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800157c:	4b50      	ldr	r3, [pc, #320]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0ad      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800158c:	4b4c      	ldr	r3, [pc, #304]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a4b      	ldr	r2, [pc, #300]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001592:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001596:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001598:	f7ff f84a 	bl	8000630 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff f846 	bl	8000630 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e09a      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b2:	4b43      	ldr	r3, [pc, #268]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015be:	4b40      	ldr	r3, [pc, #256]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	4b40      	ldr	r3, [pc, #256]	@ (80016c4 <HAL_RCC_OscConfig+0x784>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80015ce:	3a01      	subs	r2, #1
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	4311      	orrs	r1, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80015d8:	0212      	lsls	r2, r2, #8
 80015da:	4311      	orrs	r1, r2
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80015e0:	0852      	lsrs	r2, r2, #1
 80015e2:	3a01      	subs	r2, #1
 80015e4:	0552      	lsls	r2, r2, #21
 80015e6:	4311      	orrs	r1, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015ec:	0852      	lsrs	r2, r2, #1
 80015ee:	3a01      	subs	r2, #1
 80015f0:	0652      	lsls	r2, r2, #25
 80015f2:	4311      	orrs	r1, r2
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80015f8:	0912      	lsrs	r2, r2, #4
 80015fa:	0452      	lsls	r2, r2, #17
 80015fc:	430a      	orrs	r2, r1
 80015fe:	4930      	ldr	r1, [pc, #192]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001600:	4313      	orrs	r3, r2
 8001602:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001604:	4b2e      	ldr	r3, [pc, #184]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a2d      	ldr	r2, [pc, #180]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 800160a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800160e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001610:	4b2b      	ldr	r3, [pc, #172]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4a2a      	ldr	r2, [pc, #168]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800161a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800161c:	f7ff f808 	bl	8000630 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff f804 	bl	8000630 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e058      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001636:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001642:	e050      	b.n	80016e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e04f      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001648:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d148      	bne.n	80016e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001654:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a19      	ldr	r2, [pc, #100]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 800165a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800165e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001660:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a16      	ldr	r2, [pc, #88]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800166a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800166c:	f7fe ffe0 	bl	8000630 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001674:	f7fe ffdc 	bl	8000630 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e030      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x734>
 8001692:	e028      	b.n	80016e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b0c      	cmp	r3, #12
 8001698:	d023      	beq.n	80016e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a08      	ldr	r2, [pc, #32]	@ (80016c0 <HAL_RCC_OscConfig+0x780>)
 80016a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a6:	f7fe ffc3 	bl	8000630 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ac:	e00c      	b.n	80016c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ae:	f7fe ffbf 	bl	8000630 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d905      	bls.n	80016c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e013      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
 80016c0:	40021000 	.word	0x40021000
 80016c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c8:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_RCC_OscConfig+0x7b0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1ec      	bne.n	80016ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_RCC_OscConfig+0x7b0>)
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	4905      	ldr	r1, [pc, #20]	@ (80016f0 <HAL_RCC_OscConfig+0x7b0>)
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_RCC_OscConfig+0x7b4>)
 80016dc:	4013      	ands	r3, r2
 80016de:	60cb      	str	r3, [r1, #12]
 80016e0:	e001      	b.n	80016e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	feeefffc 	.word	0xfeeefffc

080016f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0e7      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b75      	ldr	r3, [pc, #468]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d910      	bls.n	800173c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b72      	ldr	r3, [pc, #456]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 0207 	bic.w	r2, r3, #7
 8001722:	4970      	ldr	r1, [pc, #448]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b6e      	ldr	r3, [pc, #440]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0cf      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d010      	beq.n	800176a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	4b66      	ldr	r3, [pc, #408]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001754:	429a      	cmp	r2, r3
 8001756:	d908      	bls.n	800176a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001758:	4b63      	ldr	r3, [pc, #396]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4960      	ldr	r1, [pc, #384]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d04c      	beq.n	8001810 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177e:	4b5a      	ldr	r3, [pc, #360]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d121      	bne.n	80017ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0a6      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001796:	4b54      	ldr	r3, [pc, #336]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d115      	bne.n	80017ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e09a      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ae:	4b4e      	ldr	r3, [pc, #312]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e08e      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017be:	4b4a      	ldr	r3, [pc, #296]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e086      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4b46      	ldr	r3, [pc, #280]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f023 0203 	bic.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4943      	ldr	r1, [pc, #268]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017e0:	f7fe ff26 	bl	8000630 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7fe ff22 	bl	8000630 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e06e      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b3a      	ldr	r3, [pc, #232]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 020c 	and.w	r2, r3, #12
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1eb      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d010      	beq.n	800183e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	4b31      	ldr	r3, [pc, #196]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001828:	429a      	cmp	r2, r3
 800182a:	d208      	bcs.n	800183e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b2e      	ldr	r3, [pc, #184]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	492b      	ldr	r1, [pc, #172]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800183e:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d210      	bcs.n	800186e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184c:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 0207 	bic.w	r2, r3, #7
 8001854:	4923      	ldr	r1, [pc, #140]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185c:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <HAL_RCC_ClockConfig+0x1ec>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d001      	beq.n	800186e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e036      	b.n	80018dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d008      	beq.n	800188c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187a:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	4918      	ldr	r1, [pc, #96]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d009      	beq.n	80018ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001898:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4910      	ldr	r1, [pc, #64]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018ac:	f000 f824 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	490b      	ldr	r1, [pc, #44]	@ (80018ec <HAL_RCC_ClockConfig+0x1f4>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
 80018c8:	4a09      	ldr	r2, [pc, #36]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80018ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <HAL_RCC_ClockConfig+0x1fc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe5d 	bl	8000590 <HAL_InitTick>
 80018d6:	4603      	mov	r3, r0
 80018d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80018da:	7afb      	ldrb	r3, [r7, #11]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40022000 	.word	0x40022000
 80018e8:	40021000 	.word	0x40021000
 80018ec:	080024b8 	.word	0x080024b8
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	@ 0x24
 80018fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001906:	4b3e      	ldr	r3, [pc, #248]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001910:	4b3b      	ldr	r3, [pc, #236]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x34>
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	2b0c      	cmp	r3, #12
 8001924:	d121      	bne.n	800196a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d11e      	bne.n	800196a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800192c:	4b34      	ldr	r3, [pc, #208]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001938:	4b31      	ldr	r3, [pc, #196]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800193a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	e005      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001948:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001954:	4a2b      	ldr	r2, [pc, #172]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10d      	bne.n	8001980 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001968:	e00a      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	2b04      	cmp	r3, #4
 800196e:	d102      	bne.n	8001976 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001970:	4b25      	ldr	r3, [pc, #148]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x110>)
 8001972:	61bb      	str	r3, [r7, #24]
 8001974:	e004      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2b08      	cmp	r3, #8
 800197a:	d101      	bne.n	8001980 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800197c:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x114>)
 800197e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d134      	bne.n	80019f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001986:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0xa6>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d003      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0xac>
 800199c:	e005      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800199e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x110>)
 80019a0:	617b      	str	r3, [r7, #20]
      break;
 80019a2:	e005      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019a4:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x114>)
 80019a6:	617b      	str	r3, [r7, #20]
      break;
 80019a8:	e002      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	617b      	str	r3, [r7, #20]
      break;
 80019ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	3301      	adds	r3, #1
 80019bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019be:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	fb03 f202 	mul.w	r2, r3, r2
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	0e5b      	lsrs	r3, r3, #25
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	3301      	adds	r3, #1
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019f0:	69bb      	ldr	r3, [r7, #24]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	@ 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000
 8001a04:	080024c8 	.word	0x080024c8
 8001a08:	00f42400 	.word	0x00f42400
 8001a0c:	007a1200 	.word	0x007a1200

08001a10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a28:	f7ff fa26 	bl	8000e78 <HAL_PWREx_GetVoltageRange>
 8001a2c:	6178      	str	r0, [r7, #20]
 8001a2e:	e014      	b.n	8001a5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a30:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a34:	4a24      	ldr	r2, [pc, #144]	@ (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a3c:	4b22      	ldr	r3, [pc, #136]	@ (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a48:	f7ff fa16 	bl	8000e78 <HAL_PWREx_GetVoltageRange>
 8001a4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a52:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a58:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a60:	d10b      	bne.n	8001a7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b80      	cmp	r3, #128	@ 0x80
 8001a66:	d919      	bls.n	8001a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a6c:	d902      	bls.n	8001a74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a6e:	2302      	movs	r3, #2
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	e013      	b.n	8001a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a74:	2301      	movs	r3, #1
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	e010      	b.n	8001a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b80      	cmp	r3, #128	@ 0x80
 8001a7e:	d902      	bls.n	8001a86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a80:	2303      	movs	r3, #3
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	e00a      	b.n	8001a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b80      	cmp	r3, #128	@ 0x80
 8001a8a:	d102      	bne.n	8001a92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	e004      	b.n	8001a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b70      	cmp	r3, #112	@ 0x70
 8001a96:	d101      	bne.n	8001a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a98:	2301      	movs	r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 0207 	bic.w	r2, r3, #7
 8001aa4:	4909      	ldr	r1, [pc, #36]	@ (8001acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001aac:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d001      	beq.n	8001abe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40022000 	.word	0x40022000

08001ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ad8:	2300      	movs	r3, #0
 8001ada:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001adc:	2300      	movs	r3, #0
 8001ade:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d041      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001af0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001af4:	d02a      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001af6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001afa:	d824      	bhi.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001afc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b00:	d008      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001b02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b06:	d81e      	bhi.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00a      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001b0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b10:	d010      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001b12:	e018      	b.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001b14:	4b86      	ldr	r3, [pc, #536]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4a85      	ldr	r2, [pc, #532]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b20:	e015      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3304      	adds	r3, #4
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 fabb 	bl	80020a4 <RCCEx_PLLSAI1_Config>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b32:	e00c      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3320      	adds	r3, #32
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fba6 	bl	800228c <RCCEx_PLLSAI2_Config>
 8001b40:	4603      	mov	r3, r0
 8001b42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b44:	e003      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	74fb      	strb	r3, [r7, #19]
      break;
 8001b4a:	e000      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b4e:	7cfb      	ldrb	r3, [r7, #19]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10b      	bne.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b54:	4b76      	ldr	r3, [pc, #472]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b62:	4973      	ldr	r1, [pc, #460]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001b6a:	e001      	b.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b6c:	7cfb      	ldrb	r3, [r7, #19]
 8001b6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d041      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001b84:	d02a      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001b86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001b8a:	d824      	bhi.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001b8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b90:	d008      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001b92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b96:	d81e      	bhi.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00a      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001b9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba0:	d010      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ba2:	e018      	b.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ba4:	4b62      	ldr	r3, [pc, #392]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4a61      	ldr	r2, [pc, #388]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001bb0:	e015      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fa73 	bl	80020a4 <RCCEx_PLLSAI1_Config>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001bc2:	e00c      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3320      	adds	r3, #32
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 fb5e 	bl	800228c <RCCEx_PLLSAI2_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001bd4:	e003      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	74fb      	strb	r3, [r7, #19]
      break;
 8001bda:	e000      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001bde:	7cfb      	ldrb	r3, [r7, #19]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10b      	bne.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001be4:	4b52      	ldr	r3, [pc, #328]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001bf2:	494f      	ldr	r1, [pc, #316]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001bfa:	e001      	b.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bfc:	7cfb      	ldrb	r3, [r7, #19]
 8001bfe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80a0 	beq.w	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c12:	4b47      	ldr	r3, [pc, #284]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001c22:	2300      	movs	r3, #0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00d      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c28:	4b41      	ldr	r3, [pc, #260]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2c:	4a40      	ldr	r2, [pc, #256]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c34:	4b3e      	ldr	r3, [pc, #248]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c40:	2301      	movs	r3, #1
 8001c42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c44:	4b3b      	ldr	r3, [pc, #236]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a3a      	ldr	r2, [pc, #232]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c50:	f7fe fcee 	bl	8000630 <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c56:	e009      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c58:	f7fe fcea 	bl	8000630 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d902      	bls.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	74fb      	strb	r3, [r7, #19]
        break;
 8001c6a:	e005      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c6c:	4b31      	ldr	r3, [pc, #196]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0ef      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001c78:	7cfb      	ldrb	r3, [r7, #19]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d15c      	bne.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01f      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d019      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c9c:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ca6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ca8:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cae:	4a20      	ldr	r2, [pc, #128]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cc8:	4a19      	ldr	r2, [pc, #100]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d016      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7fe fca9 	bl	8000630 <HAL_GetTick>
 8001cde:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce0:	e00b      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7fe fca5 	bl	8000630 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d902      	bls.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	74fb      	strb	r3, [r7, #19]
            break;
 8001cf8:	e006      	b.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0ec      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001d08:	7cfb      	ldrb	r3, [r7, #19]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d0e:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d1e:	4904      	ldr	r1, [pc, #16]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001d26:	e009      	b.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d28:	7cfb      	ldrb	r3, [r7, #19]
 8001d2a:	74bb      	strb	r3, [r7, #18]
 8001d2c:	e006      	b.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d3c:	7c7b      	ldrb	r3, [r7, #17]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d105      	bne.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d42:	4b9e      	ldr	r3, [pc, #632]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d46:	4a9d      	ldr	r2, [pc, #628]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d4c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d5a:	4b98      	ldr	r3, [pc, #608]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d60:	f023 0203 	bic.w	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d68:	4994      	ldr	r1, [pc, #592]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00a      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d7c:	4b8f      	ldr	r3, [pc, #572]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d82:	f023 020c 	bic.w	r2, r3, #12
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d8a:	498c      	ldr	r1, [pc, #560]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d9e:	4b87      	ldr	r3, [pc, #540]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001da4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	4983      	ldr	r1, [pc, #524]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00a      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001dc0:	4b7e      	ldr	r3, [pc, #504]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dce:	497b      	ldr	r1, [pc, #492]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001de2:	4b76      	ldr	r3, [pc, #472]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001df0:	4972      	ldr	r1, [pc, #456]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e04:	4b6d      	ldr	r3, [pc, #436]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e0a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e12:	496a      	ldr	r1, [pc, #424]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e26:	4b65      	ldr	r3, [pc, #404]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e34:	4961      	ldr	r1, [pc, #388]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e48:	4b5c      	ldr	r3, [pc, #368]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e56:	4959      	ldr	r1, [pc, #356]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e6a:	4b54      	ldr	r3, [pc, #336]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e70:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e78:	4950      	ldr	r1, [pc, #320]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e92:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9a:	4948      	ldr	r1, [pc, #288]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001eae:	4b43      	ldr	r3, [pc, #268]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebc:	493f      	ldr	r1, [pc, #252]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d028      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ed6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ede:	4937      	ldr	r1, [pc, #220]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001eea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001eee:	d106      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ef0:	4b32      	ldr	r3, [pc, #200]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4a31      	ldr	r2, [pc, #196]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001efa:	60d3      	str	r3, [r2, #12]
 8001efc:	e011      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001f06:	d10c      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f8c8 	bl	80020a4 <RCCEx_PLLSAI1_Config>
 8001f14:	4603      	mov	r3, r0
 8001f16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001f18:	7cfb      	ldrb	r3, [r7, #19]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001f1e:	7cfb      	ldrb	r3, [r7, #19]
 8001f20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d028      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f2e:	4b23      	ldr	r3, [pc, #140]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f34:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3c:	491f      	ldr	r1, [pc, #124]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f4c:	d106      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	4a1a      	ldr	r2, [pc, #104]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f58:	60d3      	str	r3, [r2, #12]
 8001f5a:	e011      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 f899 	bl	80020a4 <RCCEx_PLLSAI1_Config>
 8001f72:	4603      	mov	r3, r0
 8001f74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f76:	7cfb      	ldrb	r3, [r7, #19]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d02b      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f9a:	4908      	ldr	r1, [pc, #32]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001faa:	d109      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fac:	4b03      	ldr	r3, [pc, #12]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a02      	ldr	r2, [pc, #8]	@ (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fb6:	60d3      	str	r3, [r2, #12]
 8001fb8:	e014      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	2101      	movs	r1, #1
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 f867 	bl	80020a4 <RCCEx_PLLSAI1_Config>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001fda:	7cfb      	ldrb	r3, [r7, #19]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d02f      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001ffe:	4928      	ldr	r1, [pc, #160]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800200a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800200e:	d10d      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3304      	adds	r3, #4
 8002014:	2102      	movs	r1, #2
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f844 	bl	80020a4 <RCCEx_PLLSAI1_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002020:	7cfb      	ldrb	r3, [r7, #19]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d014      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002026:	7cfb      	ldrb	r3, [r7, #19]
 8002028:	74bb      	strb	r3, [r7, #18]
 800202a:	e011      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002034:	d10c      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3320      	adds	r3, #32
 800203a:	2102      	movs	r1, #2
 800203c:	4618      	mov	r0, r3
 800203e:	f000 f925 	bl	800228c <RCCEx_PLLSAI2_Config>
 8002042:	4603      	mov	r3, r0
 8002044:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002046:	7cfb      	ldrb	r3, [r7, #19]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800205c:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002062:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800206a:	490d      	ldr	r1, [pc, #52]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800207e:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002084:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800208e:	4904      	ldr	r1, [pc, #16]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002096:	7cbb      	ldrb	r3, [r7, #18]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000

080020a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020b2:	4b75      	ldr	r3, [pc, #468]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d018      	beq.n	80020f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80020be:	4b72      	ldr	r3, [pc, #456]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f003 0203 	and.w	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d10d      	bne.n	80020ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
       ||
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80020d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
       ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d047      	beq.n	800217a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	e044      	b.n	800217a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d018      	beq.n	800212a <RCCEx_PLLSAI1_Config+0x86>
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d825      	bhi.n	8002148 <RCCEx_PLLSAI1_Config+0xa4>
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d002      	beq.n	8002106 <RCCEx_PLLSAI1_Config+0x62>
 8002100:	2b02      	cmp	r3, #2
 8002102:	d009      	beq.n	8002118 <RCCEx_PLLSAI1_Config+0x74>
 8002104:	e020      	b.n	8002148 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002106:	4b60      	ldr	r3, [pc, #384]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d11d      	bne.n	800214e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002116:	e01a      	b.n	800214e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002118:	4b5b      	ldr	r3, [pc, #364]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002120:	2b00      	cmp	r3, #0
 8002122:	d116      	bne.n	8002152 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002128:	e013      	b.n	8002152 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800212a:	4b57      	ldr	r3, [pc, #348]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002136:	4b54      	ldr	r3, [pc, #336]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002146:	e006      	b.n	8002156 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      break;
 800214c:	e004      	b.n	8002158 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800214e:	bf00      	nop
 8002150:	e002      	b.n	8002158 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002152:	bf00      	nop
 8002154:	e000      	b.n	8002158 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002156:	bf00      	nop
    }

    if(status == HAL_OK)
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10d      	bne.n	800217a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800215e:	4b4a      	ldr	r3, [pc, #296]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6819      	ldr	r1, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	430b      	orrs	r3, r1
 8002174:	4944      	ldr	r1, [pc, #272]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d17d      	bne.n	800227c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002180:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a40      	ldr	r2, [pc, #256]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002186:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800218a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800218c:	f7fe fa50 	bl	8000630 <HAL_GetTick>
 8002190:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002192:	e009      	b.n	80021a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002194:	f7fe fa4c 	bl	8000630 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d902      	bls.n	80021a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	73fb      	strb	r3, [r7, #15]
        break;
 80021a6:	e005      	b.n	80021b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021a8:	4b37      	ldr	r3, [pc, #220]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ef      	bne.n	8002194 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d160      	bne.n	800227c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d111      	bne.n	80021e4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021c0:	4b31      	ldr	r3, [pc, #196]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80021c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6892      	ldr	r2, [r2, #8]
 80021d0:	0211      	lsls	r1, r2, #8
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68d2      	ldr	r2, [r2, #12]
 80021d6:	0912      	lsrs	r2, r2, #4
 80021d8:	0452      	lsls	r2, r2, #17
 80021da:	430a      	orrs	r2, r1
 80021dc:	492a      	ldr	r1, [pc, #168]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	610b      	str	r3, [r1, #16]
 80021e2:	e027      	b.n	8002234 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d112      	bne.n	8002210 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021ea:	4b27      	ldr	r3, [pc, #156]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80021f2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6892      	ldr	r2, [r2, #8]
 80021fa:	0211      	lsls	r1, r2, #8
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6912      	ldr	r2, [r2, #16]
 8002200:	0852      	lsrs	r2, r2, #1
 8002202:	3a01      	subs	r2, #1
 8002204:	0552      	lsls	r2, r2, #21
 8002206:	430a      	orrs	r2, r1
 8002208:	491f      	ldr	r1, [pc, #124]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	610b      	str	r3, [r1, #16]
 800220e:	e011      	b.n	8002234 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002210:	4b1d      	ldr	r3, [pc, #116]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002218:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6892      	ldr	r2, [r2, #8]
 8002220:	0211      	lsls	r1, r2, #8
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6952      	ldr	r2, [r2, #20]
 8002226:	0852      	lsrs	r2, r2, #1
 8002228:	3a01      	subs	r2, #1
 800222a:	0652      	lsls	r2, r2, #25
 800222c:	430a      	orrs	r2, r1
 800222e:	4916      	ldr	r1, [pc, #88]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002230:	4313      	orrs	r3, r2
 8002232:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002234:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a13      	ldr	r2, [pc, #76]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 800223a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800223e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002240:	f7fe f9f6 	bl	8000630 <HAL_GetTick>
 8002244:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002246:	e009      	b.n	800225c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002248:	f7fe f9f2 	bl	8000630 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d902      	bls.n	800225c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	73fb      	strb	r3, [r7, #15]
          break;
 800225a:	e005      	b.n	8002268 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800225c:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ef      	beq.n	8002248 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002270:	691a      	ldr	r2, [r3, #16]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	4904      	ldr	r1, [pc, #16]	@ (8002288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800227c:	7bfb      	ldrb	r3, [r7, #15]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000

0800228c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800229a:	4b6a      	ldr	r3, [pc, #424]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d018      	beq.n	80022d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80022a6:	4b67      	ldr	r3, [pc, #412]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f003 0203 	and.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d10d      	bne.n	80022d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
       ||
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80022be:	4b61      	ldr	r3, [pc, #388]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
       ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d047      	beq.n	8002362 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	e044      	b.n	8002362 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d018      	beq.n	8002312 <RCCEx_PLLSAI2_Config+0x86>
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d825      	bhi.n	8002330 <RCCEx_PLLSAI2_Config+0xa4>
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d002      	beq.n	80022ee <RCCEx_PLLSAI2_Config+0x62>
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d009      	beq.n	8002300 <RCCEx_PLLSAI2_Config+0x74>
 80022ec:	e020      	b.n	8002330 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022ee:	4b55      	ldr	r3, [pc, #340]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d11d      	bne.n	8002336 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022fe:	e01a      	b.n	8002336 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002300:	4b50      	ldr	r3, [pc, #320]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d116      	bne.n	800233a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002310:	e013      	b.n	800233a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002312:	4b4c      	ldr	r3, [pc, #304]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10f      	bne.n	800233e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800231e:	4b49      	ldr	r3, [pc, #292]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800232e:	e006      	b.n	800233e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
      break;
 8002334:	e004      	b.n	8002340 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002336:	bf00      	nop
 8002338:	e002      	b.n	8002340 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800233a:	bf00      	nop
 800233c:	e000      	b.n	8002340 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800233e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10d      	bne.n	8002362 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002346:	4b3f      	ldr	r3, [pc, #252]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6819      	ldr	r1, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	430b      	orrs	r3, r1
 800235c:	4939      	ldr	r1, [pc, #228]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 800235e:	4313      	orrs	r3, r2
 8002360:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d167      	bne.n	8002438 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002368:	4b36      	ldr	r3, [pc, #216]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a35      	ldr	r2, [pc, #212]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 800236e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002374:	f7fe f95c 	bl	8000630 <HAL_GetTick>
 8002378:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800237a:	e009      	b.n	8002390 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800237c:	f7fe f958 	bl	8000630 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d902      	bls.n	8002390 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	73fb      	strb	r3, [r7, #15]
        break;
 800238e:	e005      	b.n	800239c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002390:	4b2c      	ldr	r3, [pc, #176]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1ef      	bne.n	800237c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d14a      	bne.n	8002438 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d111      	bne.n	80023cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80023a8:	4b26      	ldr	r3, [pc, #152]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80023b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6892      	ldr	r2, [r2, #8]
 80023b8:	0211      	lsls	r1, r2, #8
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68d2      	ldr	r2, [r2, #12]
 80023be:	0912      	lsrs	r2, r2, #4
 80023c0:	0452      	lsls	r2, r2, #17
 80023c2:	430a      	orrs	r2, r1
 80023c4:	491f      	ldr	r1, [pc, #124]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	614b      	str	r3, [r1, #20]
 80023ca:	e011      	b.n	80023f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80023cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80023d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6892      	ldr	r2, [r2, #8]
 80023dc:	0211      	lsls	r1, r2, #8
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6912      	ldr	r2, [r2, #16]
 80023e2:	0852      	lsrs	r2, r2, #1
 80023e4:	3a01      	subs	r2, #1
 80023e6:	0652      	lsls	r2, r2, #25
 80023e8:	430a      	orrs	r2, r1
 80023ea:	4916      	ldr	r1, [pc, #88]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80023f0:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a13      	ldr	r2, [pc, #76]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7fe f918 	bl	8000630 <HAL_GetTick>
 8002400:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002402:	e009      	b.n	8002418 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002404:	f7fe f914 	bl	8000630 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d902      	bls.n	8002418 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	73fb      	strb	r3, [r7, #15]
          break;
 8002416:	e005      	b.n	8002424 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002418:	4b0a      	ldr	r3, [pc, #40]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0ef      	beq.n	8002404 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800242a:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	4904      	ldr	r1, [pc, #16]	@ (8002444 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002434:	4313      	orrs	r3, r2
 8002436:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002438:	7bfb      	ldrb	r3, [r7, #15]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000

08002448 <memset>:
 8002448:	4402      	add	r2, r0
 800244a:	4603      	mov	r3, r0
 800244c:	4293      	cmp	r3, r2
 800244e:	d100      	bne.n	8002452 <memset+0xa>
 8002450:	4770      	bx	lr
 8002452:	f803 1b01 	strb.w	r1, [r3], #1
 8002456:	e7f9      	b.n	800244c <memset+0x4>

08002458 <__libc_init_array>:
 8002458:	b570      	push	{r4, r5, r6, lr}
 800245a:	4d0d      	ldr	r5, [pc, #52]	@ (8002490 <__libc_init_array+0x38>)
 800245c:	4c0d      	ldr	r4, [pc, #52]	@ (8002494 <__libc_init_array+0x3c>)
 800245e:	1b64      	subs	r4, r4, r5
 8002460:	10a4      	asrs	r4, r4, #2
 8002462:	2600      	movs	r6, #0
 8002464:	42a6      	cmp	r6, r4
 8002466:	d109      	bne.n	800247c <__libc_init_array+0x24>
 8002468:	4d0b      	ldr	r5, [pc, #44]	@ (8002498 <__libc_init_array+0x40>)
 800246a:	4c0c      	ldr	r4, [pc, #48]	@ (800249c <__libc_init_array+0x44>)
 800246c:	f000 f818 	bl	80024a0 <_init>
 8002470:	1b64      	subs	r4, r4, r5
 8002472:	10a4      	asrs	r4, r4, #2
 8002474:	2600      	movs	r6, #0
 8002476:	42a6      	cmp	r6, r4
 8002478:	d105      	bne.n	8002486 <__libc_init_array+0x2e>
 800247a:	bd70      	pop	{r4, r5, r6, pc}
 800247c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002480:	4798      	blx	r3
 8002482:	3601      	adds	r6, #1
 8002484:	e7ee      	b.n	8002464 <__libc_init_array+0xc>
 8002486:	f855 3b04 	ldr.w	r3, [r5], #4
 800248a:	4798      	blx	r3
 800248c:	3601      	adds	r6, #1
 800248e:	e7f2      	b.n	8002476 <__libc_init_array+0x1e>
 8002490:	080024f8 	.word	0x080024f8
 8002494:	080024f8 	.word	0x080024f8
 8002498:	080024f8 	.word	0x080024f8
 800249c:	080024fc 	.word	0x080024fc

080024a0 <_init>:
 80024a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a2:	bf00      	nop
 80024a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a6:	bc08      	pop	{r3}
 80024a8:	469e      	mov	lr, r3
 80024aa:	4770      	bx	lr

080024ac <_fini>:
 80024ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ae:	bf00      	nop
 80024b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b2:	bc08      	pop	{r3}
 80024b4:	469e      	mov	lr, r3
 80024b6:	4770      	bx	lr
